{
  "id": "BDD412EF26504C23A5A709683D250476",
  "title": "Level 2: Grades 6-8 (Ages 11-14)",
  "subject": "Computer Science",
  "normalizedSubject": null,
  "educationLevels": [
    "06",
    "07",
    "08"
  ],
  "cspStatus": {},
  "license": {
    "title": "CC BY 4.0 US",
    "URL": "http://creativecommons.org/licenses/by/4.0/us/",
    "rightsHolder": "Common Curriculum, Inc."
  },
  "document": {
    "title": "CSTA K-12 Computer Science Standards  (Revised 2017)",
    "sourceURL": "https://drive.google.com/open?id=1-dPTAI1yk2HYPKUWZ6DqaM6aVUDa9iby"
  },
  "jurisdiction": {
    "id": "73E7187D3910423085A2439AE9C9A64F",
    "title": "Unity Concord International School"
  },
  "standards": {
    "DEE8A8A0003D40C0B0C23C1318A0396C": {
      "id": "DEE8A8A0003D40C0B0C23C1318A0396C",
      "asnIdentifier": null,
      "position": 52000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Sharinginformation online can help establish, maintain, and strengthen connections between people. For example, it allows artists and designers to display their talents and reach a broad audience. However, security attacks often start with personal information that is publicly available online. Social engineering is based on tricking people into revealing sensitive information and can be thwarted by being wary of attacks, such as phishing and spoofing.",
      "comments": [],
      "ancestorIds": [
        "EC168E2F492544598CB9C23E4A6D187F",
        "59E80C44AFF24FBABB4EA7E64E485A8B"
      ],
      "parentId": "EC168E2F492544598CB9C23E4A6D187F"
    },
    "EC168E2F492544598CB9C23E4A6D187F": {
      "id": "EC168E2F492544598CB9C23E4A6D187F",
      "asnIdentifier": null,
      "position": 51000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.IC.23",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Describe tradeoffs between allowing information to be public and keeping information private and secure.",
      "comments": [],
      "ancestorIds": [
        "59E80C44AFF24FBABB4EA7E64E485A8B"
      ],
      "parentId": "59E80C44AFF24FBABB4EA7E64E485A8B"
    },
    "D7153A40214E421BB28281783395501A": {
      "id": "D7153A40214E421BB28281783395501A",
      "asnIdentifier": null,
      "position": 50000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Crowdsourcing is gathering services, ideas, or content from a large group of people, especially from the online community. It can be done at the local level (e.g., classroom or school) or global level (e.g., age-appropriate online communities, like Scratch and Minecraft). For example, a group of students could combine animations to create a digital community mosaic. They could also solicit feedback from many people though use of online communities and electronic surveys.",
      "comments": [],
      "ancestorIds": [
        "69674A87B17347369F859B3874B075DA",
        "59E80C44AFF24FBABB4EA7E64E485A8B"
      ],
      "parentId": "69674A87B17347369F859B3874B075DA"
    },
    "69674A87B17347369F859B3874B075DA": {
      "id": "69674A87B17347369F859B3874B075DA",
      "asnIdentifier": null,
      "position": 49000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.IC.22",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Collaborate with many contributors through strategies such as crowdsourcing or surveys when creating a computational artifact.",
      "comments": [],
      "ancestorIds": [
        "59E80C44AFF24FBABB4EA7E64E485A8B"
      ],
      "parentId": "59E80C44AFF24FBABB4EA7E64E485A8B"
    },
    "BEC4CBD3EE4D471F87E035354FC7387E": {
      "id": "BEC4CBD3EE4D471F87E035354FC7387E",
      "asnIdentifier": null,
      "position": 48000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Computing technologies should support users of many backgrounds and abilities. In order to maximize accessiblity, these differences need to be addressed by examining diverse populations. With the teacher's guidance, students test and discuss the usability of various technology tools, such as apps, games, and devices.\n\nFor example, students could discuss the impacts of facial recognition software that works better for lighter skin tones and recognize that the software was likely developed with a homogeneous testing group. Students could then discuss how accessibility could be improved by sampling a more diverse population. (CA CCSS for ELA/Literacy SL.6.1, SL.7.1, SL.8.1)  ",
      "comments": [],
      "ancestorIds": [
        "B856599CDA684418A5D4080939EB809B",
        "59E80C44AFF24FBABB4EA7E64E485A8B"
      ],
      "parentId": "B856599CDA684418A5D4080939EB809B"
    },
    "B856599CDA684418A5D4080939EB809B": {
      "id": "B856599CDA684418A5D4080939EB809B",
      "asnIdentifier": null,
      "position": 47000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.IC.21",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Discuss issues of bias and accessibility in the design of existing technologies.",
      "comments": [],
      "ancestorIds": [
        "59E80C44AFF24FBABB4EA7E64E485A8B"
      ],
      "parentId": "59E80C44AFF24FBABB4EA7E64E485A8B"
    },
    "18A9BE8C1836404B9BCC073765173531": {
      "id": "18A9BE8C1836404B9BCC073765173531",
      "asnIdentifier": null,
      "position": 46000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Advancements in computer technology are neither wholly positive nor negative. However, the ways that people use computing technologies have tradeoffs. Students consider current events related to broad ideas, including privacy, communication, and automation.\n\nFor example, students could compare and contrast the impacts of computing technologies with the impacts of other systems developed throughout history such as the Pony Express and US Postal System. (HSS.7.8.4)\n\nAlternatively, students could identify tradeoffs for both personal and professional uses of a variety of computing technologies. For instance, driverless cars can increase convenience and reduce accidents, but they may be susceptible to hacking. The emerging industry will reduce the number of taxi and shared-ride drivers, but may create more software engineering and cybersecurity jobs. ",
      "comments": [],
      "ancestorIds": [
        "8B50A170939C468A9B7212526CF75FE6",
        "59E80C44AFF24FBABB4EA7E64E485A8B"
      ],
      "parentId": "8B50A170939C468A9B7212526CF75FE6"
    },
    "8B50A170939C468A9B7212526CF75FE6": {
      "id": "8B50A170939C468A9B7212526CF75FE6",
      "asnIdentifier": null,
      "position": 45000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.IC.20",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Compare tradeoffs associated with computing technologies that affect people's everyday activities and career options.",
      "comments": [],
      "ancestorIds": [
        "59E80C44AFF24FBABB4EA7E64E485A8B"
      ],
      "parentId": "59E80C44AFF24FBABB4EA7E64E485A8B"
    },
    "59E80C44AFF24FBABB4EA7E64E485A8B": {
      "id": "59E80C44AFF24FBABB4EA7E64E485A8B",
      "asnIdentifier": null,
      "position": 44000,
      "depth": 0,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Impacts of Computing",
      "comments": [],
      "ancestorIds": [],
      "parentId": null
    },
    "660CDFC1813B444CA12BB80CB198CEB8": {
      "id": "660CDFC1813B444CA12BB80CB198CEB8",
      "asnIdentifier": null,
      "position": 43000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Documentation allows creators, end users, and other developers to more easily use and understand a program. Students provide documentation for end users that explains their artifacts and how they function (e.g., project overview, user instructions). They also include comments within code to describe portions of their programs and make it easier for themselves and other developers to use, read, test, and debug.\n\nFor example, students could add comments to describe functionality of different segments of code (e.g., input scores between 0 and 100, check for invalid input, calculate and display the average of the scores). They could also communicate the process used by writing design documents, creating flowcharts, or making presentations. (CA CCSS for ELA/Literacy SL.6.5, SL.7.5, SL.8.5)",
      "comments": [],
      "ancestorIds": [
        "BD41916B3A854A609FAA4501A870579B",
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "BD41916B3A854A609FAA4501A870579B"
    },
    "BD41916B3A854A609FAA4501A870579B": {
      "id": "BD41916B3A854A609FAA4501A870579B",
      "asnIdentifier": null,
      "position": 42000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.AP.19",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Document programs in order to make them easier to use, read, test, and debug.\n",
      "comments": [],
      "ancestorIds": [
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "F9A16898F8F74394BFA27F0238BEE30F"
    },
    "FEE3D04B591A46E287992A74A73240D1": {
      "id": "FEE3D04B591A46E287992A74A73240D1",
      "asnIdentifier": null,
      "position": 41000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Collaboration is a common and crucial practice in programming development. Often, many individuals and groups work on the interdependent parts of a project together. Students assume pre-defined roles within their teams and manage the project workflow using structured timelines. With teacher guidance, they begin to create collective goals, expectations, and equitable workloads.\n\nFor example, students could decompose the design stage of a game into planning the storyboard, flowchart, and different parts of the game mechanics. They can then distribute tasks and roles among members of the team and assign deadlines. \n\nAlternatively, students could work as a team to develop a storyboard for an animation representing a written narrative, and then program the scenes individually. (CA CCSS for ELA/Literacy W.6.3, W.7.3, W.8.3)",
      "comments": [],
      "ancestorIds": [
        "31976F946C834A11B02029879F12D502",
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "31976F946C834A11B02029879F12D502"
    },
    "31976F946C834A11B02029879F12D502": {
      "id": "31976F946C834A11B02029879F12D502",
      "asnIdentifier": null,
      "position": 40000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.AP.18",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Distribute tasks and maintain a project timeline when collaboratively developing computational artifacts.",
      "comments": [],
      "ancestorIds": [
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "F9A16898F8F74394BFA27F0238BEE30F"
    },
    "88D2FF03386B4DCCA1C2D5F8C582E690": {
      "id": "88D2FF03386B4DCCA1C2D5F8C582E690",
      "asnIdentifier": null,
      "position": 39000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Use cases and test cases are created to evaluate whether programs function as intended. At this level, students develop use cases and test cases with teacher guidance. Testing should become a deliberate process that is more iterative, systematic, and proactive than at lower levels.\n\nFor example, students test programs by considering potential errors, such as what will happen if a user enters invalid input (e.g., negative numbers and 0 instead of positive numbers).\n\nAlternatively, in an interactive program, students could test that the character cannot move off of the screen in any direction, cannot move through walls, and can interact with other characters. They then adjust character behavior as needed.",
      "comments": [],
      "ancestorIds": [
        "A91129D355114A51B7228D49CBB240A1",
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "A91129D355114A51B7228D49CBB240A1"
    },
    "A91129D355114A51B7228D49CBB240A1": {
      "id": "A91129D355114A51B7228D49CBB240A1",
      "asnIdentifier": null,
      "position": 38000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.AP.17",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Systematically test and refine programs using a range of test cases.",
      "comments": [],
      "ancestorIds": [
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "F9A16898F8F74394BFA27F0238BEE30F"
    },
    "B15C8578556E4ADB967D19ED1EA1D222": {
      "id": "B15C8578556E4ADB967D19ED1EA1D222",
      "asnIdentifier": null,
      "position": 37000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Building on the work of others enables students to produce more interesting and powerful creations. Students use portions of code, algorithms, digital media, and/or data created by others in their own programs and websites. They give attribution to the original creators to acknowledge their contributions. \n\nFor example, when creating a side-scrolling game, students may incorporate portions of code that create a realistic jump movement from another person's game, and they may also import Creative Commons-licensed images to use in the background. \n\nAlternatively, when creating a website to demonstrate their knowledge of historical figures from the Civil War, students may use a professionally-designed template and public domain images of historical figures. (HSS.8.10.5) \n\nAdditionally, students could import libraries and connect to web application program interfaces (APIs) to make their own programming processes more efficient and reduce the number of bugs (e.g., to check whether the user input is a valid date, to input the current temperature from another city).",
      "comments": [],
      "ancestorIds": [
        "F25916E81D0A427A8D17BB4C11133E44",
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "F25916E81D0A427A8D17BB4C11133E44"
    },
    "F25916E81D0A427A8D17BB4C11133E44": {
      "id": "F25916E81D0A427A8D17BB4C11133E44",
      "asnIdentifier": null,
      "position": 36000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.AP.16",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Incorporate existing code, media, and libraries into original programs, and give attribution.",
      "comments": [],
      "ancestorIds": [
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "F9A16898F8F74394BFA27F0238BEE30F"
    },
    "79CD9D56FF6D446784F3F17ED0AE5EAE": {
      "id": "79CD9D56FF6D446784F3F17ED0AE5EAE",
      "asnIdentifier": null,
      "position": 35000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Development teams that employ user-centered design processes create solutions (e.g., programs and devices) that can have a large societal impact (e.g., an app that allows people with speech difficulties to allow a smartphone to clarify their speech). Students begin to seek diverse perspectives throughout the design process to improve their computational artifacts. Considerations of the end-user may include usability, accessibility, age-appropriate content, respectful language, user perspective, pronoun use, or color contrast. \n\nFor example, if students are designing an app to teach their classmates about recycling, they could first interview or survey their classmates to learn what their classmates already know about recycling and why they do or do not recycle. After building a prototype of the app, the students could then test the app with a sample of their classmates to see if they learned anything from the app and if they had difficulty using the app (e.g., trouble reading or understanding text). After gathering interview data, students could refine the app to meet classmate needs. (CA NGSS: MS-ETS1-4)",
      "comments": [],
      "ancestorIds": [
        "D9E0B98F261B4B61BC6E4D570308A216",
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "D9E0B98F261B4B61BC6E4D570308A216"
    },
    "D9E0B98F261B4B61BC6E4D570308A216": {
      "id": "D9E0B98F261B4B61BC6E4D570308A216",
      "asnIdentifier": null,
      "position": 34000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.AP.15",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Seek and incorporate feedback from team members and users to refine a solution that meets user needs.",
      "comments": [],
      "ancestorIds": [
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "F9A16898F8F74394BFA27F0238BEE30F"
    },
    "EE9ED37B8C554DE4AB9FEDDB02C1C5C9": {
      "id": "EE9ED37B8C554DE4AB9FEDDB02C1C5C9",
      "asnIdentifier": null,
      "position": 33000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Procedures support modularity in developing programs. Parameters can provide greater flexibility, reusability, and efficient use of resources. Students create procedures and/or functions that are used multiple times within a program to repeat groups of instructions. They generalize the procedures and/or functions by defining parameters that generate different outputs for a wide range of inputs.\n\nFor example, students could create a procedure to draw a circle which involves many instructions, but all of them can be invoked with one instruction, such as “drawCircle.” By adding a radius parameter, students can easily draw circles of different sizes. (CA CCSS for Mathematics 7.G.4) \n\nAlternatively, calculating the area of a regular polygon requires multiple steps. Students could write a function that accepts the number and length of the sides as parameters and then calculates the area of the polygon. This function can then be re-used inside any program to calculate the area of a regular polygon. (CA CCSS for Mathematics 6.G.1)",
      "comments": [],
      "ancestorIds": [
        "5EF9A8EB7AA74DE2AAC3C8B590F277DC",
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "5EF9A8EB7AA74DE2AAC3C8B590F277DC"
    },
    "5EF9A8EB7AA74DE2AAC3C8B590F277DC": {
      "id": "5EF9A8EB7AA74DE2AAC3C8B590F277DC",
      "asnIdentifier": null,
      "position": 32000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.AP.14",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Create procedures with parameters to organize code and make it easier to reuse.",
      "comments": [],
      "ancestorIds": [
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "F9A16898F8F74394BFA27F0238BEE30F"
    },
    "E20050F18156408E8008833A75F6C5D7": {
      "id": "E20050F18156408E8008833A75F6C5D7",
      "asnIdentifier": null,
      "position": 31000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Decomposition facilitates program development by allowing students to focus on one piece at a time (e.g., getting input from the user, processing the data, and displaying the result to the user). Decomposition also enables different students to work on different parts at the same time. Students break down (decompose) problems into subproblems, which can be further broken down to smaller parts. \n\nStudents could create an arcade game, with a title screen, a game screen, and a win/lose screen with an option to play the game again. To do this, students need to identify subproblems that accompany each screen (e.g., selecting an avatar goes in the title screen, events for controlling character action and scoring goes in the game screen, and displaying final and high score and asking whether to play again goes in the win/lose screen).\n\nAlternatively, students could decompose the problem of calculating and displaying class grades. Subproblems might include: accept input for students grades on various assignments, check for invalid grade entries, calculate per assignment averages, calculate per student averages, and display histograms of student scores for each assignment. (CA CCSS for Mathematics 6.RP.3c, 6.SP.4, 6.SP.5) ",
      "comments": [],
      "ancestorIds": [
        "FD94C30F779C4F1AABB7937F17AB46BE",
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "FD94C30F779C4F1AABB7937F17AB46BE"
    },
    "FD94C30F779C4F1AABB7937F17AB46BE": {
      "id": "FD94C30F779C4F1AABB7937F17AB46BE",
      "asnIdentifier": null,
      "position": 30000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.AP.13",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Decompose problems and subproblems into parts to facilitate the design, implementation, and review of programs.",
      "comments": [],
      "ancestorIds": [
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "F9A16898F8F74394BFA27F0238BEE30F"
    },
    "DB2E919FABE24DC79644A459AD0FF18B": {
      "id": "DB2E919FABE24DC79644A459AD0FF18B",
      "asnIdentifier": null,
      "position": 29000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Control structures can be combined in many ways. Nested loops are loops placed within loops, and nested conditionals allow the result of one conditional to lead to another. Compound conditions combine two or more conditions in a logical relationship (e.g., using AND, OR, and NOT). Students appropriately use control structures to perform repetitive and selection tasks.\n\nFor example, when programming an interactive story, students could use a compound conditional within a loop to unlock a door only if a character has a key AND is touching the door. (CA CCSS for ELA/Literacy W.6.3, W.7.3, W.8.3)\n\nAlternatively, students could use compound conditionals when writing a program to test whether two points lie along the line defined by a particular linear function. (CA CCSS for Mathematics 8.EE.7) \n\nAdditionally, students could use nested loops to program a character to do the \"chicken dance\" by opening and closing the beak, flapping the wings, shaking the hips, and clapping four times each; this dance \"chorus\" is then repeated several times in its entirety.",
      "comments": [],
      "ancestorIds": [
        "C75105E0890F4382AEE11E1C31BD1727",
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "C75105E0890F4382AEE11E1C31BD1727"
    },
    "C75105E0890F4382AEE11E1C31BD1727": {
      "id": "C75105E0890F4382AEE11E1C31BD1727",
      "asnIdentifier": null,
      "position": 28000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.AP.12",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Design and iteratively develop programs that combine control structures, including nested\n\nloops and compound conditionals.\n",
      "comments": [],
      "ancestorIds": [
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "F9A16898F8F74394BFA27F0238BEE30F"
    },
    "133272241AC44D49B58F001D94337CCD": {
      "id": "133272241AC44D49B58F001D94337CCD",
      "asnIdentifier": null,
      "position": 27000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "A variable is a container for data, and the name used for accessing the variable is called the identifier. Students declare, initialize, and update variables for storing different types of program data (e.g., text, integers) using names and naming conventions (e.g. camel case) that clearly convey the purpose of the variable, facilitate debugging, and improve readability.\n\nFor example, students could program a quiz game with a score variable (e.g. quizScore) that is initially set to zero and increases by increments of one each time the user answers a quiz question correctly and decreases by increments of one each time a user answers a quiz question incorrectly, resulting in a score that is either a positive or negative integer. (CA CCSS for Mathematics 6.NS.5) \n\nAlternatively, students could write a program that prompts the user for their name, stores the user's response in a variable (e.g. userName), and uses this variable to greet the user by name.",
      "comments": [],
      "ancestorIds": [
        "08996D1F00374B0086F27009ED1DBFE8",
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "08996D1F00374B0086F27009ED1DBFE8"
    },
    "08996D1F00374B0086F27009ED1DBFE8": {
      "id": "08996D1F00374B0086F27009ED1DBFE8",
      "asnIdentifier": null,
      "position": 26000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.AP.11",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Create clearly named variables that represent different data types and perform operations\n\non their values.\n",
      "comments": [],
      "ancestorIds": [
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "F9A16898F8F74394BFA27F0238BEE30F"
    },
    "507E2CF71F8B4F6CB2896586F232E3FB": {
      "id": "507E2CF71F8B4F6CB2896586F232E3FB",
      "asnIdentifier": null,
      "position": 25000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Complex problems are problems that would be difficult for students to solve without breaking them down into multiple steps. Flowcharts and pseudocode are used to design and illustrate the breakdown of steps in an algorithm. Students design and illustrate algorithms using pseudocode and/or flowcharts that organize and sequence the breakdown of steps for solving complex problems.\n\nFor example, students might use a flowchart to illustrate an algorithm that produces a recommendation for purchasing sneakers based on inputs such as size, colors, brand, comfort, and cost. \n\nAlternatively, students could write pseudocode to express an algorithm for suggesting their outfit for the day, based on inputs such as the weather, color preferences, and day of the week.",
      "comments": [],
      "ancestorIds": [
        "316EACC65A9F44E595CE6867412808EF",
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "316EACC65A9F44E595CE6867412808EF"
    },
    "316EACC65A9F44E595CE6867412808EF": {
      "id": "316EACC65A9F44E595CE6867412808EF",
      "asnIdentifier": null,
      "position": 24000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.AP.10",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Use flowcharts and/or pseudocode to address complex problems as algorithms.",
      "comments": [],
      "ancestorIds": [
        "F9A16898F8F74394BFA27F0238BEE30F"
      ],
      "parentId": "F9A16898F8F74394BFA27F0238BEE30F"
    },
    "F9A16898F8F74394BFA27F0238BEE30F": {
      "id": "F9A16898F8F74394BFA27F0238BEE30F",
      "asnIdentifier": null,
      "position": 23000,
      "depth": 0,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Algorithms & Programming",
      "comments": [],
      "ancestorIds": [],
      "parentId": null
    },
    "91E742606F0642AF9501F49781F1D6E1": {
      "id": "91E742606F0642AF9501F49781F1D6E1",
      "asnIdentifier": null,
      "position": 22000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "A model may be a programmed simulation of events or a representation of how various data is related. In order to refine a model, students need to consider which data points are relevant, how data points relate to each other, and if the data is accurate. For example, students may make a prediction about how far a ball will travel based on a table of data related to the height and angle of a track. The students could then test and refine their model by comparing predicted versus actual results and considering whether other factors are relevant (e.g., size and mass of the ball). Additionally, students could refine game mechanics based on test outcomes in order to make the game more balanced or fair.",
      "comments": [],
      "ancestorIds": [
        "0C4E5BFE19924300BD1E9E1E49B1AB4C",
        "7F4671010C1D4089996CCE2877EBC7CD"
      ],
      "parentId": "0C4E5BFE19924300BD1E9E1E49B1AB4C"
    },
    "0C4E5BFE19924300BD1E9E1E49B1AB4C": {
      "id": "0C4E5BFE19924300BD1E9E1E49B1AB4C",
      "asnIdentifier": null,
      "position": 21000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.DA.09",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Refine computational models based on the data they have generated.",
      "comments": [],
      "ancestorIds": [
        "7F4671010C1D4089996CCE2877EBC7CD"
      ],
      "parentId": "7F4671010C1D4089996CCE2877EBC7CD"
    },
    "12CC9767AFDA4E3088548AD8BFEA5B04": {
      "id": "12CC9767AFDA4E3088548AD8BFEA5B04",
      "asnIdentifier": null,
      "position": 20000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "As students continue to build on their ability to organize and present data visually to support a claim, they will need to understand when and how to transform data for this purpose. Students should transform data to remove errors, highlight or expose relationships, and/or make it easier for computers to process. The cleaning of data is an important transformation for ensuring consistent format and reducing noise and errors (e.g., removing irrelevant responses in a survey). An example of a transformation that highlights a relationship is representing males and females as percentagesof a whole instead of as individual counts. ",
      "comments": [],
      "ancestorIds": [
        "B5DBD8013C254BC295835F23CB0AEBC5",
        "7F4671010C1D4089996CCE2877EBC7CD"
      ],
      "parentId": "B5DBD8013C254BC295835F23CB0AEBC5"
    },
    "B5DBD8013C254BC295835F23CB0AEBC5": {
      "id": "B5DBD8013C254BC295835F23CB0AEBC5",
      "asnIdentifier": null,
      "position": 19000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.DA.08",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Collect data using computational tools and transform the data to make it more useful and reliable.",
      "comments": [],
      "ancestorIds": [
        "7F4671010C1D4089996CCE2877EBC7CD"
      ],
      "parentId": "7F4671010C1D4089996CCE2877EBC7CD"
    },
    "67CE60604B524CAD9547BBF975CD974F": {
      "id": "67CE60604B524CAD9547BBF975CD974F",
      "asnIdentifier": null,
      "position": 18000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Data representations occur at multiple levels ofabstraction, from the physical storage of bits to the arrangement of information into organized formats (e.g., tables). Students should represent the same data in multiple ways. For example, students could represent the same color using binary, RGB values, hex codes (low-level representations), as well as forms understandable by people, including words, symbols, and digital displays of the color (high-level representations).",
      "comments": [],
      "ancestorIds": [
        "D8D01F250E8E4BC2A37F642BFBF02066",
        "7F4671010C1D4089996CCE2877EBC7CD"
      ],
      "parentId": "D8D01F250E8E4BC2A37F642BFBF02066"
    },
    "D8D01F250E8E4BC2A37F642BFBF02066": {
      "id": "D8D01F250E8E4BC2A37F642BFBF02066",
      "asnIdentifier": null,
      "position": 17000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.DA.07",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Represent data using multiple encoding schemes.",
      "comments": [],
      "ancestorIds": [
        "7F4671010C1D4089996CCE2877EBC7CD"
      ],
      "parentId": "7F4671010C1D4089996CCE2877EBC7CD"
    },
    "7F4671010C1D4089996CCE2877EBC7CD": {
      "id": "7F4671010C1D4089996CCE2877EBC7CD",
      "asnIdentifier": null,
      "position": 16000,
      "depth": 0,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Data & Analysis",
      "comments": [],
      "ancestorIds": [],
      "parentId": null
    },
    "8F7116BC178A4000964AFA3AC3B32AF9": {
      "id": "8F7116BC178A4000964AFA3AC3B32AF9",
      "asnIdentifier": null,
      "position": 15000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Encryption can be as simple as letter substitution or as complicated as modern methods used to secure networks and the Internet. Students should encode and decode messages using a variety of encryption methods, and they should understand the different levels of complexity used to hide or secure information. For example, students could secure messages using methods such as Caesar cyphers or steganography (i.e., hiding messages inside a picture or other data). They can also model more complicated methods, such as public key encryption, through unplugged activities.",
      "comments": [],
      "ancestorIds": [
        "3EE15219798F426EB0C09C3936466216",
        "542E3B6F9C9442509378B3B75F6E044E"
      ],
      "parentId": "3EE15219798F426EB0C09C3936466216"
    },
    "3EE15219798F426EB0C09C3936466216": {
      "id": "3EE15219798F426EB0C09C3936466216",
      "asnIdentifier": null,
      "position": 14000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.NI.06",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Apply multiple methods of encryption to model the secure transmission of information.",
      "comments": [],
      "ancestorIds": [
        "542E3B6F9C9442509378B3B75F6E044E"
      ],
      "parentId": "542E3B6F9C9442509378B3B75F6E044E"
    },
    "E6F662B61BC345B79AA162D9052D8D14": {
      "id": "E6F662B61BC345B79AA162D9052D8D14",
      "asnIdentifier": null,
      "position": 13000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Information that is stored online is vulnerable to unwanted access. Examples of physical security measures to protect data include keeping passwords hidden, locking doors, making backup copies on external storage devices, and erasing a storage device before it is reused. Examples of digital security measures include secure router admin passwords, firewalls that limit access to private networks, and the use of a protocol such as HTTPS to ensure secure data transmission.",
      "comments": [],
      "ancestorIds": [
        "F353D91814E04B1BB82C1B13E62ED911",
        "542E3B6F9C9442509378B3B75F6E044E"
      ],
      "parentId": "F353D91814E04B1BB82C1B13E62ED911"
    },
    "F353D91814E04B1BB82C1B13E62ED911": {
      "id": "F353D91814E04B1BB82C1B13E62ED911",
      "asnIdentifier": null,
      "position": 12000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.NI.05",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Explain how physical and digital security measures protect electronic information.",
      "comments": [],
      "ancestorIds": [
        "542E3B6F9C9442509378B3B75F6E044E"
      ],
      "parentId": "542E3B6F9C9442509378B3B75F6E044E"
    },
    "A0837C25C2EE402EB8943524401B646E": {
      "id": "A0837C25C2EE402EB8943524401B646E",
      "asnIdentifier": null,
      "position": 11000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Protocols are rules that define how messages between computers are sent. They determine how quickly and securely information is transmitted across networks, as well as how to handle errors in transmission. Students model how data is sent using protocols to choose the fastest path and to deal with missing information. Knowledge of the details of how specific protocols work is not expected. The priority at this grade level is understanding the purpose of protocols and how they enable efficient and errorless communication. \n\nFor example, students could devise a plan for sending data representing a textual message and devise a plan for resending lost information.\n\nAlternatively, students could devise a plan for sending data to represent a picture, and devise a plan for interpreting the image when pieces of the data are missing.\n\nAdditionally, students could model the speed of sending messages by Bluetooth, Wi-Fi, or cellular networks and describe ways errors in data transmission can be detected and dealt with.",
      "comments": [],
      "ancestorIds": [
        "6A6C8DAFFF574CC29F0DD9941A898D58",
        "542E3B6F9C9442509378B3B75F6E044E"
      ],
      "parentId": "6A6C8DAFFF574CC29F0DD9941A898D58"
    },
    "6A6C8DAFFF574CC29F0DD9941A898D58": {
      "id": "6A6C8DAFFF574CC29F0DD9941A898D58",
      "asnIdentifier": null,
      "position": 10000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.NI.04",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Model the role of protocols in transmitting data across networks and the Internet.",
      "comments": [],
      "ancestorIds": [
        "542E3B6F9C9442509378B3B75F6E044E"
      ],
      "parentId": "542E3B6F9C9442509378B3B75F6E044E"
    },
    "542E3B6F9C9442509378B3B75F6E044E": {
      "id": "542E3B6F9C9442509378B3B75F6E044E",
      "asnIdentifier": null,
      "position": 9000,
      "depth": 0,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Networks & the Internet",
      "comments": [],
      "ancestorIds": [],
      "parentId": null
    },
    "B5BF7286E5704B4BB3EF02569E82899A": {
      "id": "B5BF7286E5704B4BB3EF02569E82899A",
      "asnIdentifier": null,
      "position": 8000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Since a computing device may interact with interconnected devices within a system, problems may not be due to the specific computing device itself but to devices connected to it. Just as pilots use checklists to troubleshoot problems with aircraft systems, students should use a similar, structured process to troubleshoot problems with computing systems and ensure that potential solutions are not overlooked. Examples of troubleshooting strategies include following a troubleshooting flow diagram, making changes to software to see if hardware will work, checking connections and settings, and swapping in working components.",
      "comments": [],
      "ancestorIds": [
        "AD7454B8803A48EAA58D1BE9CB76CBED",
        "169F2A47CA3E45A3A2FC911EFAE5A89E"
      ],
      "parentId": "AD7454B8803A48EAA58D1BE9CB76CBED"
    },
    "AD7454B8803A48EAA58D1BE9CB76CBED": {
      "id": "AD7454B8803A48EAA58D1BE9CB76CBED",
      "asnIdentifier": null,
      "position": 7000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.CS.03",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Systematically identify and fix problems with computing devices and their components.",
      "comments": [],
      "ancestorIds": [
        "169F2A47CA3E45A3A2FC911EFAE5A89E"
      ],
      "parentId": "169F2A47CA3E45A3A2FC911EFAE5A89E"
    },
    "C00BE726F78D465198DAFA8F461A400F": {
      "id": "C00BE726F78D465198DAFA8F461A400F",
      "asnIdentifier": null,
      "position": 6000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Collecting and exchanging data involves input, output, storage, and processing. When possible, students select the components for their project designs by considering tradeoffs between factors such as functionality, cost, size, speed, accessibility, and aesthetics. Students do not need to implement their project design in order to meet this standard.\n\nFor example, students could design a mobile tour app that displays information relevant to specific locations when the device is nearby or when the user selects a virtual stop on the tour. They select appropriate components, such as GPS or cellular-based geolocation tools, textual input, and speech recognition, to use in their project design.\n\nAlternatively, students could design a project that uses a sensor to collect the salinity, moisture, and temperature of soil. They may select a sensor that connects wirelessly through a Bluetooth connection because it supports greater mobility, or they could instead select a physical USB connection that does not require a separate power source. (CA NGSS: MS-ETS1-1, MS-ETS1-2)",
      "comments": [],
      "ancestorIds": [
        "2AB12D9443EA42098F3A05620BB53760",
        "169F2A47CA3E45A3A2FC911EFAE5A89E"
      ],
      "parentId": "2AB12D9443EA42098F3A05620BB53760"
    },
    "2AB12D9443EA42098F3A05620BB53760": {
      "id": "2AB12D9443EA42098F3A05620BB53760",
      "asnIdentifier": null,
      "position": 5000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.CS.02",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Design a project that combines hardware and software components to collect and exchange data.",
      "comments": [],
      "ancestorIds": [
        "169F2A47CA3E45A3A2FC911EFAE5A89E"
      ],
      "parentId": "169F2A47CA3E45A3A2FC911EFAE5A89E"
    },
    "E01B5EB8DEEE4B8FBBF33C06FDFBC023": {
      "id": "E01B5EB8DEEE4B8FBBF33C06FDFBC023",
      "asnIdentifier": null,
      "position": 4000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "The study of human–computer interaction (HCI) can improve the design of devices, including both hardware and software. Students should make recommendations for existing devices (e.g., a laptop, phone, or tablet) or design their own components or interface (e.g., create theirown controllers). Teachers can guide students to consider usability through several lenses, including accessibility, ergonomics, and learnability. For example, assistive devices provide capabilities such as scanning written information and converting it to speech. ",
      "comments": [],
      "ancestorIds": [
        "70D9D94976A04AA7A30152A627FD1562",
        "169F2A47CA3E45A3A2FC911EFAE5A89E"
      ],
      "parentId": "70D9D94976A04AA7A30152A627FD1562"
    },
    "70D9D94976A04AA7A30152A627FD1562": {
      "id": "70D9D94976A04AA7A30152A627FD1562",
      "asnIdentifier": null,
      "position": 3000,
      "depth": 1,
      "listId": "",
      "statementNotation": "2.CS.01",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Recommend improvements to the design of computing devices, based on an analysis of how users interact with the devices.",
      "comments": [],
      "ancestorIds": [
        "169F2A47CA3E45A3A2FC911EFAE5A89E"
      ],
      "parentId": "169F2A47CA3E45A3A2FC911EFAE5A89E"
    },
    "169F2A47CA3E45A3A2FC911EFAE5A89E": {
      "id": "169F2A47CA3E45A3A2FC911EFAE5A89E",
      "asnIdentifier": null,
      "position": 2000,
      "depth": 0,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Computing Systems",
      "comments": [],
      "ancestorIds": [],
      "parentId": null
    },
    "D4C454F49701459EBAB174E6DFF5B563": {
      "id": "D4C454F49701459EBAB174E6DFF5B563",
      "asnIdentifier": null,
      "position": 1001,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Levels 1A, 1B, 2, and 3A are the computer science standards for ALL students. The Level 3B standards are intended for students who wish to pursue the study of computer science in high school beyond what is required for all students (specialty or elective courses). ",
      "comments": [],
      "ancestorIds": [
        "8723AFDA628D42C38BD0D089BFC8D88C"
      ],
      "parentId": "8723AFDA628D42C38BD0D089BFC8D88C"
    },
    "8723AFDA628D42C38BD0D089BFC8D88C": {
      "id": "8723AFDA628D42C38BD0D089BFC8D88C",
      "asnIdentifier": null,
      "position": 1000,
      "depth": 1,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Note: Following are the CSTA Standards (performance expectations) with California modified descriptive statements and identified cross-curricular standards alignments with NGSS, CCSS, etc.\n",
      "comments": [],
      "ancestorIds": [],
      "parentId": null
    }
  }
}