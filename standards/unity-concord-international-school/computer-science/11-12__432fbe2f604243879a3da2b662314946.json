{
  "id": "432FBE2F604243879A3DA2B662314946",
  "title": "Level 3B: Grades 11-12 (Ages 16-18)",
  "subject": "Computer Science",
  "normalizedSubject": null,
  "educationLevels": [
    "11",
    "12"
  ],
  "cspStatus": {},
  "license": {
    "title": "CC BY 4.0 US",
    "URL": "http://creativecommons.org/licenses/by/4.0/us/",
    "rightsHolder": "Common Curriculum, Inc."
  },
  "document": {
    "title": "CSTA K-12 Computer Science Standards  (Revised 2017)",
    "sourceURL": "https://drive.google.com/open?id=1-dPTAI1yk2HYPKUWZ6DqaM6aVUDa9iby"
  },
  "jurisdiction": {
    "id": "73E7187D3910423085A2439AE9C9A64F",
    "title": "Unity Concord International School"
  },
  "standards": {
    "E42A6F41B821401A8DDBD599B0561FEC": {
      "id": "E42A6F41B821401A8DDBD599B0561FEC",
      "asnIdentifier": null,
      "position": 64000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Laws and regulations influence what software gets developed and how society benefits or does not. \n\nFor example, students could debate the pros and cons of changes to regulations around net neutrality: Many believe that mandating that Internet service providers (ISPs) maintain net neutrality facilitates competition between Internet-based content providers and supports consumer choice, but others believe such regulations represent government overreach. \n\nAlternatively, students could debate the impacts of different copyright rules in various countries and impacts on economy, society, and culture: Long-lasting copyrights in the United States enable creators to profit from their works but also prevent works from entering the public domain where they can be freely used and adapted to create new works.",
      "comments": [],
      "ancestorIds": [
        "C163CE38605E46178CAC9441B9A026D4",
        "574B20758E534D0E92634F829FA309C9"
      ],
      "parentId": "C163CE38605E46178CAC9441B9A026D4"
    },
    "C163CE38605E46178CAC9441B9A026D4": {
      "id": "C163CE38605E46178CAC9441B9A026D4",
      "asnIdentifier": null,
      "position": 63000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.IC.28",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Debate laws and regulations that impact the development and use of software.",
      "comments": [],
      "ancestorIds": [
        "574B20758E534D0E92634F829FA309C9"
      ],
      "parentId": "574B20758E534D0E92634F829FA309C9"
    },
    "37E1CBC4E703427F8C0B5DB09913A258": {
      "id": "37E1CBC4E703427F8C0B5DB09913A258",
      "asnIdentifier": null,
      "position": 62000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "It is important to be able to evaluate current technologies and innovations and their potential for future impact on society. Students describe how a given computational innovation might change in the future and impacts these evolutions could have on society, economy, or culture. \n\nFor example, students could consider ways in which computers may support education (or healthcare) in the future, or how developments in virtual reality might impact arts and entertainment. \n\nAlternatively, students could consider how autonomous vehicles will affect individuals' car ownership and car use habits as well as industries that employ human drivers (e.g., trucking, taxi service).",
      "comments": [],
      "ancestorIds": [
        "A89FB2BDE81B4DD18B406A561664F9FD",
        "574B20758E534D0E92634F829FA309C9"
      ],
      "parentId": "A89FB2BDE81B4DD18B406A561664F9FD"
    },
    "A89FB2BDE81B4DD18B406A561664F9FD": {
      "id": "A89FB2BDE81B4DD18B406A561664F9FD",
      "asnIdentifier": null,
      "position": 61000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.IC.27",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Predict how computational innovations that have revolutionized aspects of our culture might evolve.",
      "comments": [],
      "ancestorIds": [
        "574B20758E534D0E92634F829FA309C9"
      ],
      "parentId": "574B20758E534D0E92634F829FA309C9"
    },
    "C31C15A93FC94781842D923B04FD6390": {
      "id": "C31C15A93FC94781842D923B04FD6390",
      "asnIdentifier": null,
      "position": 60000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Computers, computation, and technology can help improve the lives of humans and support positive developments in society, economy, and/or culture. However, access to such resources is not the same for everyone in the world. Students define and evaluate ways in which different technologies, applications, or computational tools might benefit all people in society or might only benefit those with the greatest access or resources. \n\nFor example, students could describe ways in which groups of people benefit, do not benefit, or could benefit better by access to high-speed Internet connectivity.\n\nAlternatively, students could describe educational impacts of children not having access to a computer in their home.",
      "comments": [],
      "ancestorIds": [
        "88D7543074154709B7C1D72C6F9CA4F2",
        "574B20758E534D0E92634F829FA309C9"
      ],
      "parentId": "88D7543074154709B7C1D72C6F9CA4F2"
    },
    "88D7543074154709B7C1D72C6F9CA4F2": {
      "id": "88D7543074154709B7C1D72C6F9CA4F2",
      "asnIdentifier": null,
      "position": 59000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.IC.26",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Evaluate the impact of equity, access, and influence on the distribution of computing resources in a global society.",
      "comments": [],
      "ancestorIds": [
        "574B20758E534D0E92634F829FA309C9"
      ],
      "parentId": "574B20758E534D0E92634F829FA309C9"
    },
    "16977D4614D3493C9CFF3813631074FE": {
      "id": "16977D4614D3493C9CFF3813631074FE",
      "asnIdentifier": null,
      "position": 58000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "People design computational artifacts to help make the lives of humans better. Students evaluate an artifact and comment on aspects of it which positively or negatively impact users and give ideas for reducing the possible negative impacts. \n\nFor example, students could discuss how algorithms that screen job candidates' resumes can cut costs for companies (a beneficial effect) but introduce or amplify bias in the hiring process (a harmful effect). \n\nAlternatively, students could discuss how turn-by-turn navigation tools can help drivers avoid traffic and find alternate routes (a beneficial effect), but sometimes channel large amounts of traffic down small neighborhood streets (a harmful effect). \n\nAdditionally, students could discuss how social media algorithms can help direct users' attention to interesting content (a beneficial effect), while simultaneously limiting users' exposure to information that contradicts pre-existing beliefs (a harmful effect).",
      "comments": [],
      "ancestorIds": [
        "5C2B8FCD1ED743F58AD547403BC4D25B",
        "574B20758E534D0E92634F829FA309C9"
      ],
      "parentId": "5C2B8FCD1ED743F58AD547403BC4D25B"
    },
    "5C2B8FCD1ED743F58AD547403BC4D25B": {
      "id": "5C2B8FCD1ED743F58AD547403BC4D25B",
      "asnIdentifier": null,
      "position": 57000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.IC.25",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Evaluate computational artifacts with regard to improving their beneficial effects and reducing harmful effects on society.",
      "comments": [],
      "ancestorIds": [
        "574B20758E534D0E92634F829FA309C9"
      ],
      "parentId": "574B20758E534D0E92634F829FA309C9"
    },
    "574B20758E534D0E92634F829FA309C9": {
      "id": "574B20758E534D0E92634F829FA309C9",
      "asnIdentifier": null,
      "position": 56000,
      "depth": 0,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Impacts of Computing",
      "comments": [],
      "ancestorIds": [],
      "parentId": null
    },
    "FC85CE8EDCE84F3F93DFB4E120F4AEDC": {
      "id": "FC85CE8EDCE84F3F93DFB4E120F4AEDC",
      "asnIdentifier": null,
      "position": 55000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Particular problems may be more effectively solved using some programming languages than other programming languages. Students provide a rationale for why a specific programming language is better suited for a solving a particular class of problem. \n\nFor example, students could explain how a language with a large library base can make developing a web application easier. \n\nAlternatively, students could explain how languages that support particular programming paradigms (e.g., object-oriented or functional) can make implementation more aligned with design choices. \n\nAdditionally, students could discuss how languages that implement garbage collection are good for simplicity of memory management, but may result in poor performance characteristics.",
      "comments": [],
      "ancestorIds": [
        "CF51761640F74622ABC21FF32862EA6E",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "CF51761640F74622ABC21FF32862EA6E"
    },
    "CF51761640F74622ABC21FF32862EA6E": {
      "id": "CF51761640F74622ABC21FF32862EA6E",
      "asnIdentifier": null,
      "position": 54000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.24",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Compare multiple programming languages, and discuss how their features make them suitable for solving different types of problems.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "180F66F2D8B54245BC11C22A22EC50A1": {
      "id": "180F66F2D8B54245BC11C22A22EC50A1",
      "asnIdentifier": null,
      "position": 53000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Code reviews are a common software industry practice and valuable for developing technical communication skills. Key qualities of code include correctness, usability, readability, efficiency, and scalability. Students walk through code they created and explain how it works. Additionally, they follow along when someone else is explaining their code and ask appropriate questions. \n\nFor example, students could present their code to a group or visually inspect code in pairs. \n\nAlternatively, in response to another student's presentation, students could provide feedback including comments on correctness of the code, comments on how code interacts with code that calls it, and design and documentation features.",
      "comments": [],
      "ancestorIds": [
        "91F3A654C015448C87BC4B51AFC4FAB6",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "91F3A654C015448C87BC4B51AFC4FAB6"
    },
    "91F3A654C015448C87BC4B51AFC4FAB6": {
      "id": "91F3A654C015448C87BC4B51AFC4FAB6",
      "asnIdentifier": null,
      "position": 52000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.23",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Evaluate key qualities of a program through a process such as a code review.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "96837B061D8B4DC2A9C280071607FAEC": {
      "id": "96837B061D8B4DC2A9C280071607FAEC",
      "asnIdentifier": null,
      "position": 51000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Modularity and code reuse is key in modern software. However, when code is modified, the programmer should consider relevant situations in which this code might be used in other places. Students create and document modifications to existing programs that enhance functionality, and then identify, document, and correct unintended consequences. \n\nFor example, students could take an existing a procedure that calculates the average of a set of numbers and returns an integer (which lacks precision) and modify it to return a floating point number instead. The student would explain how the change might impact multiple scenarios.",
      "comments": [],
      "ancestorIds": [
        "D3067A147FE84210BCB9DBC726115000",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "D3067A147FE84210BCB9DBC726115000"
    },
    "D3067A147FE84210BCB9DBC726115000": {
      "id": "D3067A147FE84210BCB9DBC726115000",
      "asnIdentifier": null,
      "position": 50000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.22",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Modify an existing program to add additional functionality and discuss intended and\n\nunintended implications (e.g., breaking other functionality).\n",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "2E651339C7D34D868C5DB01B9F35DE14": {
      "id": "2E651339C7D34D868C5DB01B9F35DE14",
      "asnIdentifier": null,
      "position": 49000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Testing software is a critically important process. The ability of students to identify a set of important test cases communicates their understanding of the design specifications and potential issues due to implementation choices. Students select and apply their own test cases to cover both general behavior and the edge cases which show behavior at boundary conditions.\n\nFor example, for a program that is supposed to accept test scores in the range of [0,100], students could develop appropriate tests (e.g, a negative value, 0, 100, and a value above 100). \n\nAlternatively, students developing an app to allow users to create and store calendar appointments could develop and use a series of test cases for various scenarios including checking for correct dates, flagging for user confirmation when a calendar event is very long, checking for correct email address format for invitees, and checking for appropriate screen display as users go through the process of adding, editing, and deleting events.",
      "comments": [],
      "ancestorIds": [
        "065E8B35C964464ABB620DB19F7EA97D",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "065E8B35C964464ABB620DB19F7EA97D"
    },
    "065E8B35C964464ABB620DB19F7EA97D": {
      "id": "065E8B35C964464ABB620DB19F7EA97D",
      "asnIdentifier": null,
      "position": 48000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.21",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Develop and use a series of test cases to verify that a program performs according to its design specifications.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "E74251AA87894D51AA77AE8027269424": {
      "id": "E74251AA87894D51AA77AE8027269424",
      "asnIdentifier": null,
      "position": 47000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Software development is a process that benefits from the use of tools that manage complexity, iterative development, and collaboration. Large or complex software projects often require contributions from multiple developers. Version control systems and other collaborative tools and practices help coordinate the process and products contributed by individuals on a development team. An integrated development environment (IDE) is a program within which a developer implements, compiles or interprets, tests, debugs, and deploys a software project. Students use common software development and documentation support tools in the context of a group software development project. At this level, facility with the full functionality available in the collaborative tools is not expected.\n\nFor example, students could use common version control systems to modify and improve code or revert to a previous code version. \n\nAlternatively, students could use appropriate IDEs to support more efficient code design and development. \n\nAdditionally, students could use various collaboration, communication, and code documentation tools designed to support groups engaging in complex and interrelated work.",
      "comments": [],
      "ancestorIds": [
        "622A2DACCA294520A0C2D813D8D27227",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "622A2DACCA294520A0C2D813D8D27227"
    },
    "622A2DACCA294520A0C2D813D8D27227": {
      "id": "622A2DACCA294520A0C2D813D8D27227",
      "asnIdentifier": null,
      "position": 46000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.20",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Use version control systems, integrated development environments (IDEs), and collaborative tools and practices (e.g., code documentation) while developing software within a group.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "202C275FE4884912B2BAB16B7E06059F": {
      "id": "202C275FE4884912B2BAB16B7E06059F",
      "asnIdentifier": null,
      "position": 45000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Humans use computers in various forms in their lives and work. Depending on the situation, software solutions are more appropriate or valuable when available on different computational platforms or devices. Students develop programs for more than one computing platform (e.g. desktop, web, or mobile). \n\nFor example, students could develop a mobile app for a location-aware software product and a different program that is installed on a computer.\n\nAlternatively, students could create a browser-based product and make it accessible across multiple platforms or computers (e.g., email). ",
      "comments": [],
      "ancestorIds": [
        "AD5116CF07D54020B21B2DD954D467D7",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "AD5116CF07D54020B21B2DD954D467D7"
    },
    "AD5116CF07D54020B21B2DD954D467D7": {
      "id": "AD5116CF07D54020B21B2DD954D467D7",
      "asnIdentifier": null,
      "position": 44000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.19",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Develop programs for multiple computing platforms.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "BBC96282E6D74E79A309478392C952A7": {
      "id": "BBC96282E6D74E79A309478392C952A7",
      "asnIdentifier": null,
      "position": 43000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Some common forms of security issues arise from specific programming languages, platforms, or program implementation choices. Students read a given a piece of code that contains a common security vulnerability, explain the code's intended function or purpose, provide and explain examples of how a specific input could exploit that vulnerability (e.g., the program accessing data or performing in unintended ways), and implement a change in the code to mitigate this vulnerability. \n\nFor example, students could review code that takes a date as input, recognize that the code doesn't check for appropriate last days of the month, and modify the code to do that. \n\nAlternatively, students could review code that supports entry of patient data (e.g., height and weight) and doesn't prompt users to double check unreasonable values (e.g., height at 6 feet and weight at 20 pounds).",
      "comments": [],
      "ancestorIds": [
        "C8265202E0514D32BE53C5828CC66FB0",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "C8265202E0514D32BE53C5828CC66FB0"
    },
    "C8265202E0514D32BE53C5828CC66FB0": {
      "id": "C8265202E0514D32BE53C5828CC66FB0",
      "asnIdentifier": null,
      "position": 42000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.18",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Identify and fix security issues that might compromise computer programs.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "FA854835A8CB4165A89EDC562C048753": {
      "id": "FA854835A8CB4165A89EDC562C048753",
      "asnIdentifier": null,
      "position": 41000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Software development processes are used to help manage the design, development, and product/project management of a software solution. Various types of processes have been developed over time to meet changing needs in the software landscape. The systems development life cycle (SDLC), also referred to as the application development life cycle, is a term used in systems engineering, information systems, and software engineering to describe a process for planning, creating, testing, and deploying an information system. Other examples of common processes could include agile, spiral, or waterfall. Students develop a program following a specific software life cycle process, with proper scaffolding from the teacher.\n\nFor example, students could work in teams on a common project using the agile development process, which is based on breaking product development work into small increments. \n\nAlternatively, students could be guided in implementing sprints to focus work on daily standup meetings or scrums to support efficient communication.",
      "comments": [],
      "ancestorIds": [
        "6B3BB547803C4100A6E826E9FCD879B3",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "6B3BB547803C4100A6E826E9FCD879B3"
    },
    "6B3BB547803C4100A6E826E9FCD879B3": {
      "id": "6B3BB547803C4100A6E826E9FCD879B3",
      "asnIdentifier": null,
      "position": 40000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.17",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Plan and develop programs for broad audiences using a specific software life cycle process.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "2DD859FBEB8246108171A642B2948171": {
      "id": "2DD859FBEB8246108171A642B2948171",
      "asnIdentifier": null,
      "position": 39000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Code reuse is critical both for managing complexity in modern programs, but also in increasing programming efficiency and reliability by having programmers reuse code that has been highly vetted and tested. Software libraries allow developers to integrate common and often complex functionality without having to reimplement that functionality from scratch. Students identify, evaluate, and select appropriate application programming interfaces (APIs) from software libraries to use with a given language and operating system. They appropriately use resources such as technical documentation, online forums, and developer communities to learn about libraries and troubleshoot problems with APIs that they have chosen. \n\nFor example, students could import charting and graphing modules to display data sets, adopt an online service that provides cloud storage and retrieval for a database used in a multiplayer game, or import location services into an app that identifies points of interest on a map. Libraries of APIs can be student-created or publicly available (e.g., common graphics libraries or map/navigation APIs).",
      "comments": [],
      "ancestorIds": [
        "F9C221B5883D468793DA497A66575AAA",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "F9C221B5883D468793DA497A66575AAA"
    },
    "F9C221B5883D468793DA497A66575AAA": {
      "id": "F9C221B5883D468793DA497A66575AAA",
      "asnIdentifier": null,
      "position": 38000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.16",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Demonstrate code reuse by creating programming solutions using libraries and APIs.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "B4DCC7ACC6A04E6B895E8C693814F191": {
      "id": "B4DCC7ACC6A04E6B895E8C693814F191",
      "asnIdentifier": null,
      "position": 37000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "As students encounter complex, real-world problems that span multiple disciplines or social systems, they need to be able to decompose problems and apply already developed code as part of their solutions. Students decompose complex problems into manageable sub-problems that could potentially be solved with programs or procedures that can be reused or already exist. \n\nFor example, in analyzing an Internet radio app, students could identify that users need to create an account and enter a password. They could identify a common application programming interface (API) for checking and displaying password strength. Additionally, students could recognize that the songs would need to be sorted by the time last played in order to display the most recently played songs and identify a common API for sorting dates from most to least recent. \n\nAlternatively, in analyzing the problem of tracking medical treatment in a hospital, students could recognize that patient records need to be stored in a database and identify a database solution to support quick access and modification of patient records. Additionally, they could recognize that records in the database need to be stored securely and could identify an encryption API to support the desired level of privacy.\n",
      "comments": [],
      "ancestorIds": [
        "D4E3757293F4449D98480C03CA5FE0F9",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "D4E3757293F4449D98480C03CA5FE0F9"
    },
    "D4E3757293F4449D98480C03CA5FE0F9": {
      "id": "D4E3757293F4449D98480C03CA5FE0F9",
      "asnIdentifier": null,
      "position": 36000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.15",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Analyze a large-scale computational problem and identify generalizable patterns that can be applied to a solution.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "523B102F80984E8FB3DBE3A9CF4CA9CF": {
      "id": "523B102F80984E8FB3DBE3A9CF4CA9CF",
      "asnIdentifier": null,
      "position": 35000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Programmers often address complex tasks through design and decomposition using procedures and/or modules. In object-oriented programming languages, classes can support this decomposition. Students create a computational artifact that solves a problem through use of procedures, modules, and/or objects. This problem should be of sufficient complexity to benefit from decomposition and/or use of objects. \n\nFor example, students could write a flashcard program in which each card is able to show both the question and answer and record user history. \n\nAlternatively, students could create a simulation of an ecosystem in which sprites carry out behaviors, such as consuming resources.",
      "comments": [],
      "ancestorIds": [
        "38EA8AB668964228970F5866DFD50CD6",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "38EA8AB668964228970F5866DFD50CD6"
    },
    "38EA8AB668964228970F5866DFD50CD6": {
      "id": "38EA8AB668964228970F5866DFD50CD6",
      "asnIdentifier": null,
      "position": 34000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.14",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Construct solutions to problems using student-created components, such as procedures, modules, and/or objects.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "FB64397C9BC642DB8903157355B2AA61": {
      "id": "FB64397C9BC642DB8903157355B2AA61",
      "asnIdentifier": null,
      "position": 31000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Recursion is a powerful problem solving approach where the problem solution is built on solutions of smaller instances of the same problem. A base case, which returns a result without referencing itself, must be defined, otherwise infinite recursion will occur. Students represent a sequence of calls to a recursive algorithm and show how the process resolves to a solution. \n\nFor example, students could draw a diagram to illustrate flow of execution by keeping track of parameter and returned values for each recursive call. \n\nAlternatively, students could create a video showing the passing of arguments as the recursive algorithm runs.",
      "comments": [],
      "ancestorIds": [
        "4D2433A754A646C39A1E6D5C8A40E088",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "4D2433A754A646C39A1E6D5C8A40E088"
    },
    "4D2433A754A646C39A1E6D5C8A40E088": {
      "id": "4D2433A754A646C39A1E6D5C8A40E088",
      "asnIdentifier": null,
      "position": 30000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.13",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Illustrate the flow of execution of a recursive algorithm.\n",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "CA6EB435DB4549B3B801774B44AEB780": {
      "id": "CA6EB435DB4549B3B801774B44AEB780",
      "asnIdentifier": null,
      "position": 29000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Data structures are designed to provide different ways of storing and manipulating data sets to optimize various aspects of storage or runtime performance. Choice of data structures is made based on expected data characteristics and expected program functions. Students = compare and contrast how basic functions (e.g.., insertion, deletion, and modification) would differ for common data structures including lists, arrays, stacks, and queues. \n\nFor example, students could draw a diagram of how different data structures change when items are added, deleted, or modified. They could explain tradeoffs in storage and efficiency issues.\n\nAlternatively, when presented with a description of a program and the functions it would be most likely to be running, students could list pros and cons for a specific data structure use in that scenario.",
      "comments": [],
      "ancestorIds": [
        "04EB10C331534122B1C8907C143DE641",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "04EB10C331534122B1C8907C143DE641"
    },
    "04EB10C331534122B1C8907C143DE641": {
      "id": "04EB10C331534122B1C8907C143DE641",
      "asnIdentifier": null,
      "position": 28000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.12",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Compare and contrast fundamental data structures and their uses.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "C5476285C41E49539B4C0F8231A0ACED": {
      "id": "C5476285C41E49539B4C0F8231A0ACED",
      "asnIdentifier": null,
      "position": 27000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Algorithms that perform the same task can be implemented in different ways, which take different amounts of time to run on a given input set. Algorithms are commonly evaluated using asymptotic analysis (i.e., “Big O”) which involves exploration of behavior when the input set grows very large. Students classify algorithms by the most common time classes (e.g., log n, linear, n log n, and quadratic or higher). \n\nFor example, students could read a given algorithm, identify the control constructs, and in conjunction with input size, identify the efficiency class of the algorithm.",
      "comments": [],
      "ancestorIds": [
        "0156C2532AD04A2D8418E62C3D0366D1",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "0156C2532AD04A2D8418E62C3D0366D1"
    },
    "0156C2532AD04A2D8418E62C3D0366D1": {
      "id": "0156C2532AD04A2D8418E62C3D0366D1",
      "asnIdentifier": null,
      "position": 26000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.11",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Evaluate algorithms in terms of their efficiency, correctness, and clarity.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "0F779D8B07A8445A8D74B8A3CEF326CA": {
      "id": "0F779D8B07A8445A8D74B8A3CEF326CA",
      "asnIdentifier": null,
      "position": 25000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "One of the core uses of computers is to store, organize, and retrieve information when working with large amounts of data. Students create computational artifacts that use searching and/or sorting algorithms to retrieve, organize, or store information. Students do not need to select their algorithm based on efficiency.\n\nFor example, students could write a script to sequence their classmates in order from youngest to oldest. \n\nAlternatively, students could write a program to find certain words within a text and report their location.",
      "comments": [],
      "ancestorIds": [
        "A57F58310893430582699946631DFA17",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "A57F58310893430582699946631DFA17"
    },
    "A57F58310893430582699946631DFA17": {
      "id": "A57F58310893430582699946631DFA17",
      "asnIdentifier": null,
      "position": 24000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.10",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Use and adapt classic algorithms to solve computational problems.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "F819D3C96919433683B198BE98C1576C": {
      "id": "F819D3C96919433683B198BE98C1576C",
      "asnIdentifier": null,
      "position": 23000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Artificial intelligence algorithms allow a computer to perceive and move in the world, use knowledge, and engage in problem solving. Students create a computational artifact that is able to carry out a simple task commonly performed by living organisms. Students do not need to realistically simulate human behavior or solve a complex problem in order to meet this standard.\n\nFor example, students could implement an algorithm for playing tic-tac-toe that would select an appropriate location for the next move. \n\nAlternatively, students could implement an algorithm that allows a solar-powered robot to move to a sunny location when its batteries are low.",
      "comments": [],
      "ancestorIds": [
        "7D5AB6281E5D4E3A8EDF0D2E7E3E7156",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "7D5AB6281E5D4E3A8EDF0D2E7E3E7156"
    },
    "7D5AB6281E5D4E3A8EDF0D2E7E3E7156": {
      "id": "7D5AB6281E5D4E3A8EDF0D2E7E3E7156",
      "asnIdentifier": null,
      "position": 22000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.09",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Implement an artificial intelligence algorithm to play a game against a human opponent or\n\nsolve a problem.\n",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "581BE18E57644BA7AD2A7542C4046F26": {
      "id": "581BE18E57644BA7AD2A7542C4046F26",
      "asnIdentifier": null,
      "position": 21000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Artificial intelligence is a sub-discipline of computer science that enables computers to solve problems previously handled by biological systems. There are many applications of artificial intelligence, including computer vision and speech recognition. Students research and explain how artificial intelligence has been employed in a given system. Students are not expected to implement an artificially intelligent system in order to meet this standard.\n\nFor example, students could observe an artificially intelligent system and notice where its behavior is not human-like, such as when a character in a videogame makes a mistake that a human is unlikely to make, or when a computer easily beats even the best human players at a given game.\n\nAlternatively, students could interact with a search engine asking various questions, and after reading articles on the topic, they could explain how the computer is able to respond to queries.",
      "comments": [],
      "ancestorIds": [
        "F74F810471334F2391DE1688C50BE2C3",
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "F74F810471334F2391DE1688C50BE2C3"
    },
    "F74F810471334F2391DE1688C50BE2C3": {
      "id": "F74F810471334F2391DE1688C50BE2C3",
      "asnIdentifier": null,
      "position": 20000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.AP.08",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Describe how artificial intelligence drives many software and physical systems.",
      "comments": [],
      "ancestorIds": [
        "94A9AE8DDC6048889D1780BB769872EC"
      ],
      "parentId": "94A9AE8DDC6048889D1780BB769872EC"
    },
    "94A9AE8DDC6048889D1780BB769872EC": {
      "id": "94A9AE8DDC6048889D1780BB769872EC",
      "asnIdentifier": null,
      "position": 19000,
      "depth": 0,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Algorithms & Programming",
      "comments": [],
      "ancestorIds": [],
      "parentId": null
    },
    "30002003E12347C1B99C80BA2CA12D98": {
      "id": "30002003E12347C1B99C80BA2CA12D98",
      "asnIdentifier": null,
      "position": 18000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "A model could be implemented as a diagram or a program that represents key properties of a physical or other system. A simulation is based on a model, and enables observation of the system as key properties change. Students explore, explain, and evaluate existing models and simulations, in order to support the refinement of hypotheses about how the systems work. At this level, the ability to accurately and completely model and simulate complex systems is not expected.\n\nFor example, a computer model of ants following a path created by other ants who found food explains the trail-like travel patterns of the insect. Students could evaluate if the output of the model fits well with their hypothesis that ants navigate the world through the use of pheromones. They could explain how the computer model supports this hypothesis and how it might leave out certain aspects of ant behavior and whether these are important to understanding ant travel behavior. \n\nAlternatively, students could hypothesize how different ground characteristics (e.g., soil type, thickness of sediment above bedrock) relate to the severity of shaking at the surface during an earthquake. They could add or modify input about ground characteristics into an earthquake simulator, observe the changed simulation output, and then evaluate their hypotheses.",
      "comments": [],
      "ancestorIds": [
        "392992915E2A43A6A2345165E6F8F6BD",
        "42F7E7BD267648F8BD5BAD5262D4FD61"
      ],
      "parentId": "392992915E2A43A6A2345165E6F8F6BD"
    },
    "392992915E2A43A6A2345165E6F8F6BD": {
      "id": "392992915E2A43A6A2345165E6F8F6BD",
      "asnIdentifier": null,
      "position": 17000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.DA.07",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Evaluate the ability of models and simulations to test and support the refinement of hypotheses.",
      "comments": [],
      "ancestorIds": [
        "42F7E7BD267648F8BD5BAD5262D4FD61"
      ],
      "parentId": "42F7E7BD267648F8BD5BAD5262D4FD61"
    },
    "9C00D34E86C646138FB4F6C2C1D2972F": {
      "id": "9C00D34E86C646138FB4F6C2C1D2972F",
      "asnIdentifier": null,
      "position": 16000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Data collection and organization is essential for obtaining new information insights and revealing new knowledge in our modern world. As computers are able to process larger sets of data, gathering data in an efficient and reliable matter remains important. The choice of data collection tools and quality of the data collected influences how new information, insights, and knowledge will support claims and be communicated. Students devise a reliable method to gather information, use software to extract digital data from data sets, and clean and organize the data in ways that support summaries of information obtained from the data. At this level, students may, but are not required to, create their own data collection tools.\n\nFor example, students could create a computational artifact that records information from a sonic distance sensor to monitor the motion of a prototype vehicle. \n\nAlternatively, students could develop a reliable and practical way to automatically digitally record the number of animals entering a portion of a field to graze.  \n\nAdditionally, students could also find a web site containing data (e.g., race results for a major marathon), scrape the data from the web site using data collection tools, and format the data so it can be analyzed.",
      "comments": [],
      "ancestorIds": [
        "E1D90FDD2FEB401DA55C671E76B3EBA6",
        "42F7E7BD267648F8BD5BAD5262D4FD61"
      ],
      "parentId": "E1D90FDD2FEB401DA55C671E76B3EBA6"
    },
    "E1D90FDD2FEB401DA55C671E76B3EBA6": {
      "id": "E1D90FDD2FEB401DA55C671E76B3EBA6",
      "asnIdentifier": null,
      "position": 15000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.DA.06",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Select data collection tools and techniques to generate data sets that support a claim or\n\ncommunicate information.\n",
      "comments": [],
      "ancestorIds": [
        "42F7E7BD267648F8BD5BAD5262D4FD61"
      ],
      "parentId": "42F7E7BD267648F8BD5BAD5262D4FD61"
    },
    "82E0AA14E73B45ECA444762D05D316DB": {
      "id": "82E0AA14E73B45ECA444762D05D316DB",
      "asnIdentifier": null,
      "position": 14000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Data analysis tools can be useful for identifying patterns in large amounts of data in many different fields. Computers can help with the processing of extremely large sets of data making very complex systems manageable. Students use computational tools to analyze, summarize, and visualize a large set of data. \n\nFor example, students could analyze a data set containing marathon times and determine how age, gender, weather, and course features correlate with running times. \n\nAlternatively, students could analyze a data set of social media interactions to identify the most influential users and visualize the intersections between different social groups.",
      "comments": [],
      "ancestorIds": [
        "D061181437D44F2DAB9AAB6DC07B53B1",
        "42F7E7BD267648F8BD5BAD5262D4FD61"
      ],
      "parentId": "D061181437D44F2DAB9AAB6DC07B53B1"
    },
    "D061181437D44F2DAB9AAB6DC07B53B1": {
      "id": "D061181437D44F2DAB9AAB6DC07B53B1",
      "asnIdentifier": null,
      "position": 13000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.DA.05",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Use data analysis tools and techniques to identify patterns in data representing complex systems.",
      "comments": [],
      "ancestorIds": [
        "42F7E7BD267648F8BD5BAD5262D4FD61"
      ],
      "parentId": "42F7E7BD267648F8BD5BAD5262D4FD61"
    },
    "42F7E7BD267648F8BD5BAD5262D4FD61": {
      "id": "42F7E7BD267648F8BD5BAD5262D4FD61",
      "asnIdentifier": null,
      "position": 12000,
      "depth": 0,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Data & Analysis",
      "comments": [],
      "ancestorIds": [],
      "parentId": null
    },
    "45B8282A745B4FD0951479D62E30CA9E": {
      "id": "45B8282A745B4FD0951479D62E30CA9E",
      "asnIdentifier": null,
      "position": 11000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "The design of the Internet includes hierarchy and redundancy to help it scale reliably. An end-to-end architecture means that key functions are placed at endpoints in the network (i.e., an Internet user's computer and the server hosting a website) rather than in the middle of the network. Open standards for transmitting information across the Internet help fuel its growth. This design philosophy impacts systems and technologies that integrate with the Internet. Students explain how Internet-based systems depend on these characteristics. \n\nFor example, students could explain how having common, standard protocols enable products and services from different developers to communicate. Examples of security concerns to consider: encryption and authentication strategies, secure coding, and safeguarding keys.\n\nAlternatively, students could describe how the end-to-end architecture and redundancy in routing enables Internet users to access information and services even if part of the network is down; the information can still be routed from one end to another through a different path.",
      "comments": [],
      "ancestorIds": [
        "C073D6690F664D36B67366E7A61BB382",
        "27CF298D37924945B34481020B3F0945"
      ],
      "parentId": "C073D6690F664D36B67366E7A61BB382"
    },
    "C073D6690F664D36B67366E7A61BB382": {
      "id": "C073D6690F664D36B67366E7A61BB382",
      "asnIdentifier": null,
      "position": 10000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.NI.04",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Compare ways software developers protect devices and information from unauthorized access.",
      "comments": [],
      "ancestorIds": [
        "27CF298D37924945B34481020B3F0945"
      ],
      "parentId": "27CF298D37924945B34481020B3F0945"
    },
    "8DF90FBCE6D04815961E56F3B6FC1109": {
      "id": "8DF90FBCE6D04815961E56F3B6FC1109",
      "asnIdentifier": null,
      "position": 9000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Choice of network topology is determined, in part, by how many devices can be supported and the character of communication needs between devices. Each device is assigned an address that uniquely identifies it on the network. Routers function by comparing addresses to determine how information on the network should reach its desgination. Switches compare addresses to determine which computers will receive information. Students explore and explain how network performance degrades when various factors affect the network. Recommend use of free online network simulators to explore how these issues impact network functionality.\n\nFor example, students could use online network simulators to describe how network performance changes when the number of devices increases.\n\nAlternatively, students could visualize and describe changes to the distribution of network traffic when a router on the network fails.",
      "comments": [],
      "ancestorIds": [
        "58DFA88F54F64484886113F450176C14",
        "27CF298D37924945B34481020B3F0945"
      ],
      "parentId": "58DFA88F54F64484886113F450176C14"
    },
    "58DFA88F54F64484886113F450176C14": {
      "id": "58DFA88F54F64484886113F450176C14",
      "asnIdentifier": null,
      "position": 8000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.NI.03",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Describe the issues that impact network functionality (e.g., bandwidth, load, delay, topology).",
      "comments": [],
      "ancestorIds": [
        "27CF298D37924945B34481020B3F0945"
      ],
      "parentId": "27CF298D37924945B34481020B3F0945"
    },
    "27CF298D37924945B34481020B3F0945": {
      "id": "27CF298D37924945B34481020B3F0945",
      "asnIdentifier": null,
      "position": 7000,
      "depth": 0,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Networks & the Internet",
      "comments": [],
      "ancestorIds": [],
      "parentId": null
    },
    "210831B005FD4B0FB707D01368563126": {
      "id": "210831B005FD4B0FB707D01368563126",
      "asnIdentifier": null,
      "position": 6000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Computing systems use processors (e.g., a central processing unit or CPU) to execute program instructions. Processors are composed of components that implement the logical or computational operations required by the instructions. AND, OR, and NOT are examples of logic gates. Adders are examples of higher-leveled circuits built using low-level logic gates. Students illustrate how modern computing devices are made up of smaller and simpler components which implement the logic underlying the functionality of a computer processor. At this level, knowledge of how logic gates are constructed is not expected.\n\nFor example, students could construct truth tables, draw logic circuit diagrams, or use an online logic circuit simulator. Students could explore the interaction of the CPU, RAM, and I/O by labeling a diagram of the von Neumann architecture.\n\nAlternatively, students could design higher-level circuits using low-level logic gates (e.g., adders).",
      "comments": [],
      "ancestorIds": [
        "94FBD09D16834955913278B902710599",
        "03E94210237041F7B7827D730E98D5F0"
      ],
      "parentId": "94FBD09D16834955913278B902710599"
    },
    "94FBD09D16834955913278B902710599": {
      "id": "94FBD09D16834955913278B902710599",
      "asnIdentifier": null,
      "position": 5000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.CS.02",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Illustrate ways computing systems implement logic, input, and output through hardware components.",
      "comments": [],
      "ancestorIds": [
        "03E94210237041F7B7827D730E98D5F0"
      ],
      "parentId": "03E94210237041F7B7827D730E98D5F0"
    },
    "8F81503F398247CB869FED03E71B438A": {
      "id": "8F81503F398247CB869FED03E71B438A",
      "asnIdentifier": null,
      "position": 4000,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Operating systems (OS) software is the code that manages the computer’s basic functions. Students describe at a high level the different functions of different components of operating system software. Examples of functions could include memory management, data storage/retrieval, processes management, and access control.\n\nFor example, students could use monitoring tools including within an OS to inspect the services and functions running on a system and create an artifact to describe the activity that they observed (e.g., when a browser is running with many tabs open, memory usage is increased). They could also inspect and describe changes in the activity monitor that occur as different applications are executing (e.g., processor utilization increases when a new application is launched). Examples of roles could include memory management, data storage/retrieval, processes management, and access control.  ",
      "comments": [],
      "ancestorIds": [
        "D8B9DE98E77E43DC8E34278236008D4F",
        "03E94210237041F7B7827D730E98D5F0"
      ],
      "parentId": "D8B9DE98E77E43DC8E34278236008D4F"
    },
    "D8B9DE98E77E43DC8E34278236008D4F": {
      "id": "D8B9DE98E77E43DC8E34278236008D4F",
      "asnIdentifier": null,
      "position": 3000,
      "depth": 1,
      "listId": "",
      "statementNotation": "3B.CS.01",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Categorize the roles of operating system software.",
      "comments": [],
      "ancestorIds": [
        "03E94210237041F7B7827D730E98D5F0"
      ],
      "parentId": "03E94210237041F7B7827D730E98D5F0"
    },
    "03E94210237041F7B7827D730E98D5F0": {
      "id": "03E94210237041F7B7827D730E98D5F0",
      "asnIdentifier": null,
      "position": 2000,
      "depth": 0,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Computing Systems",
      "comments": [],
      "ancestorIds": [],
      "parentId": null
    },
    "F17D4D7BB1E74D1C9FD84491CC5DA9B2": {
      "id": "F17D4D7BB1E74D1C9FD84491CC5DA9B2",
      "asnIdentifier": null,
      "position": 1001,
      "depth": 2,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Levels 1A, 1B, 2, and 3A are the computer science standards for ALL students. The Level 3B standards are intended for students who wish to pursue the study of computer science in high school beyond what is required for all students (specialty or elective courses). ",
      "comments": [],
      "ancestorIds": [
        "7ADD1994970249D7AD9FD9AE0DAA6D87"
      ],
      "parentId": "7ADD1994970249D7AD9FD9AE0DAA6D87"
    },
    "7ADD1994970249D7AD9FD9AE0DAA6D87": {
      "id": "7ADD1994970249D7AD9FD9AE0DAA6D87",
      "asnIdentifier": null,
      "position": 1000,
      "depth": 1,
      "listId": "",
      "statementNotation": "",
      "altStatementNotation": null,
      "statementLabel": null,
      "description": "Note: Following are the CSTA Standards (performance expectations) with California modified descriptive statements and identified cross-curricular standards alignments with NGSS, CCSS, etc.\n",
      "comments": [],
      "ancestorIds": [],
      "parentId": null
    }
  }
}